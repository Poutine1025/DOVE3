scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
xmax = max(tmp_dat$time[which(tmp_dat$VE>=0)])
xmax = max(tmp_dat$time[which(tmp_dat$VE>=0)],0)
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
aspect.ratio=1/2.5)
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
aspect.ratio=1/1.5)
i=4
xlabel = ifelse(i < infection_ind, "Months since vaccination", "Months since infection")
tmp_dat = as.data.frame(vaccine[[i]])
xmax = max(tmp_dat$time[which(tmp_dat$VE>=0)],0)
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
aspect.ratio=1/1.5)
## data: subject.id, event.time, censor.time, entry.time, Vtime, Vtype, infection.time, infection.type, X
## ResMat: restriction matrix
## interact: consider interaction of vaccination and infection or not
tau = max(data$event.time)
n = length(unique(data$subject.id))
m = as.vector(table(data$subject.id))
MaxReccur = max(m)
index_dup = which(duplicated(data$subject.id))
data_unique = data[-index_dup,]
X = model.matrix(~., data_unique[,9:ncol(data)])[,-1]
# standardize covariates X
SD <- apply(X = X, MARGIN = 2L, FUN = sd, na.rm = TRUE)
# standardize covariates X
SD = apply(X = X, MARGIN = 2L, FUN = sd, na.rm = TRUE)
X = scale(x = X, center = FALSE, scale = SD)
View(X)
Time = data$event.time
Delta = ifelse(data$event.time < data$censor.time, 1, 0)
t = sort(unique(Time[which(Delta==1)]), decreasing = T)
C = data_unique$censor.time
VacTime = data_unique$entry.time
FirstInfTime = data_unique$infection.time
S = NULL
V = NULL
n_cohort = max(data$Vtype)
interact_ind = 0
infection_ind = 0
S_vac = as.list(data_unique$Vtime)
V_vac = as.list(data_unique$Vtype)
if(interact){
S_vac = computeList(S_vac, S_vac, (1:n)-1)
V_vac = computeList(V_vac, as.list(data_unique$Vtype + n_cohort), (1:n)-1)
interact_ind = n_cohort + 1
infection_ind = 2*n_cohort + 1
} else{
infection_ind = n_cohort + 1
}
for (i in 1:MaxReccur) {
if(i == 1){
S = computeList(S_vac, as.list(data_unique$infection.time), (1:n)-1)
V = computeList(V_vac, as.list(data_unique$infection.type + infection_ind - 1), (1:n)-1)
} else{
subid_i = which(m == i)
loc = which(data$subject.id%in%subid_i)
loc = loc[seq(i,length(loc),i)]
time_i = data$infection.time[loc]
type_i = data$infection.type[loc]
S_tmp = rep(tau, n)
S_tmp[subid_i] = time_i
V_tmp = rep(infection_ind, n)
V_tmp[subid_i] = type_i + infection_ind - 1
S = computeList(S, as.list(S_tmp), (1:n)-1)
V = computeList(V, as.list(V_tmp), (1:n)-1)
}
}
dimension = numeric(length(knots))
for (i in 1:length(dimension)) {
dimension[i] = length(knots[[i]]) + 1
}
if(constantVE){
dimension = dimension - 1
}
dimension[infection_ind:length(dimension)] = dimension[infection_ind:length(dimension)] + 1
result = Cox_general(Time, t, Delta, C, V,
S, X, m, VacTime, FirstInfTime,
dimension, infection_ind, interact_ind,
knots, ResMat, eps, MaxIter,
constantVE, interact, cutoff)
result$Covariance
SD
result$beta
result$beta * SD
View(covariates)
result$beta / SD
View(covariates)
result$Covariance
result$Covariance /SD
result = Cox_general(Time, t, Delta, C, V,
S, X, m, VacTime, FirstInfTime,
dimension, infection_ind, interact_ind,
knots, ResMat, eps, MaxIter,
constantVE, interact, cutoff)
result$beta = result$beta / SD
for (k in 1:ncol(X)) {
result$Covariance[,k] = result$Covariance[,k] / SD[k]
result$Covariance[k,] = result$Covariance[k,] / SD[k]
}
sqrt(diag(result$Covariance))
View(covariates)
tmp_plot
tmp_plot = ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
aspect.ratio=1/1.5)
tmp_plot
document()
sourceCpp("./src/Cox_general.cpp")
result = Cox_general(Time, t, Delta, C, V,
S, X, m, VacTime, FirstInfTime,
dimension, infection_ind, interact_ind,
knots, ResMat, eps, MaxIter,
constantVE, interact, cutoff)
result$beta = result$beta / SD
for (k in 1:ncol(X)) {
result$Covariance[,k] = result$Covariance[,k] / SD[k]
result$Covariance[k,] = result$Covariance[k,] / SD[k]
}
sqrt(diag(result$Covariance))
View(covariates)
document()
sourceCpp("./src/Cox_general.cpp")
document()
document()
rm(list = c("computeList", "Cox_general"))
document()
n_type = length(vaccine)
result = NULL
for (i in 1:n_type) {
xlabel = ifelse(i < infection_ind, "Months since vaccination", "Months since infection")
tmp_dat = as.data.frame(vaccine[[i]])
xmax = max(tmp_dat$time[which(tmp_dat$VE>=0)],0)
tmp_plot = ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
aspect.ratio=1/1.5)
result[[i]] = tmp_plot
}
View(result)
getwd()
document()
document()
document()
document()
load("./data/exampleData.RData")
View(exampleData)
data = exampleData
colnames(data_unique[,9:ncol(data)])
data_unique = data[-index_dup,]
## data: subject.id, event.time, censor.time, entry.time, Vtime, Vtype, infection.time, infection.type, X
## ResMat: restriction matrix
## interact: consider interaction of vaccination and infection or not
tau = max(data$event.time)
n = length(unique(data$subject.id))
m = as.vector(table(data$subject.id))
MaxReccur = max(m)
index_dup = which(duplicated(data$subject.id))
data_unique = data[-index_dup,]
colnames(data_unique[,9:ncol(data)])
View(exampleData)
View(exampleData)
load("./data/exampleData.RData")
rownames(exampleData)
rownames(exampleData) = NULL
View(exampleData)
save(exampleData, file = "./data/exampleData.RData")
load("./data/exampleData.RData")
View(exampleData)
table(data$priority)
table(exampleData$age)
document()
View(exampleData)
## data: subject.id, event.time, censor.time, entry.time, Vtime, Vtype, infection.time, infection.type, X
## ResMat: restriction matrix
## interact: consider interaction of vaccination and infection or not
tau = max(data$event.time)
n = length(unique(data$subject.id))
m = as.vector(table(data$subject.id))
MaxReccur = max(m)
index_dup = which(duplicated(data$subject.id))
data_unique = data[-index_dup,]
coef_name = colnames(data_unique[,9:ncol(data)])
X = model.matrix(~., data_unique[,9:ncol(data)])[,-1]
colnames(X)
document()
pwd
getwd()
document()
?exampleData
View(exampleData)
View(exampleData)
View(exampleData)
load("./data/exampleData.RData")
View(exampleData)
exampleData$infection.time = exampleData$event.time
View(exampleData)
save(exampleData, file = "./data/exampleData.RData")
?exampleData
library(usethis)
library(devtools)
document()
?exampleData
View(exampleData)
document()
build()
library(devtools)
build()
document()
build()
document()
build()
getwd()
library(devtools)
document()
build()
?document
getwd()
document()
document()
document()
document()
document()
document()
build()
document()
build()
document()
build()
document()
document()
?model.matrix
?sd
?na.omit
?pnorm
document()
document()
check()
check()
check()
?dove3
?DOVE#
?DOVE3
data("exampleData")
View(exampleData)
library(DOVE3, quietly=TRUE)
?outcome
?exposure
View(exampleData)
knitr::opts_chunk$set(echo = TRUE)
opt <- options()
options(continue="  ", width=70, prompt=" ")
on.exit(options(opt))
#library(DOVE3, quietly=TRUE)
data(exmapleData)
document()
library(devtools)
document()
getwd()
load_all("../DOVE3")
knitr::opts_chunk$set(echo = TRUE)
opt <- options()
options(continue="  ", width=70, prompt=" ")
on.exit(options(opt))
#library(DOVE3, quietly=TRUE)
data(exmapleData)
View(opt)
data("exampleData")
data(exmapleData)
data(exmapleData)
data(exmapleData)
data(exmapleData)
data(exmapleData)
data(exmapleData)
data(exmapleData)
data(exampleData)
head(exampleData)
summary(exampleData)
271-119
View(exampleData)
View(exampleData)
library(tidyverse)
test = exampleData%>%
order_by(subject.id, infection.time)
test = exampleData%>%
order_by(subject.id, infection.time)
View(exampleData)
?order_by
test = exampleData%>%
arrange(subject.id, infection.time)
View(test)
exampleData = exampleData%>%
arrange(subject.id, infection.time)
View(exampleData)
getwd()
save(exampleData, file = "./data/exampleData.RData")
document()
load_all("../DOVE3")
data(exampleData)
View(exampleData)
head(exampleData)
View(exampleData)
exampleData$gender = ifelse(exampleData$gender=="Male", 1, 0)
View(exampleData)
save(exampleData, file = "./data/exampleData.RData")
document()
load_all("../DOVE3")
data(exampleData)
View(exampleData)
head(exampleData)
summary(exampleData)
mean(exampleData)
sum(is.na(exampleData$gender))
summary(exampleData)
# specify the knots for each exposure
vaccine.knots = list("vac.type1" = c(30),
"vac.type2" = c(30,60),
"vac.type3" = c(30,60))
prior.infection.knots = list("inf.type1" = c(14),
"inf.type2" = c(14))
# Fit the simple model without interaction or related vaccine types
formula = outcome(subject.id, entry.time, event.time, censor.time) ~
age + gender + priority +
exposure(Vtime, Vtype, infection.time, infection.type)
data = exampleData
# test with simple model
result1 = dove3(formula = formula,
data = data,
vaccine_knots = vaccine.knots,
prior_infection_knots = prior.infection.knots)
# specify the knots for each exposure
vaccine.knots = list("vac.type1" = c(30),
"vac.type2" = c(30,60),
"vac.type3" = c(30,60))
prior.infection.knots = list("inf.type1" = c(14),
"inf.type2" = c(14))
# Fit the simple model without interaction or related vaccine types
formula = outcome(subject.id, entry.time, event.time, censor.time) ~
age + gender + priority +
exposure(Vtime, Vtype, infection.time, infection.type)
data = exampleData
# test with simple model
result1 = dove3(formula = formula,
data = data,
vaccine_knots = vaccine.knots,
prior_infection_knots = prior.infection.knots)
# specify the knots for each exposure
vaccine.knots = list("vac.type1" = c(30),
"vac.type2" = c(30,60),
"vac.type3" = c(30,60))
prior.infection.knots = list("inf.type1" = c(14),
"inf.type2" = c(14))
# Fit the simple model without interaction or related vaccine types
formula = outcome(subject.id, entry.time, event.time, censor.time) ~
age + gender + priority +
exposure(Vtime, Vtype, infection.time, infection.type)
data = exampleData
# test with simple model
result1 = dove3(formula = formula,
data = data,
vaccine_knots = vaccine.knots,
prior_infection_knots = prior.infection.knots)
class(result1)
typeof
typeof(result1)
result1$covariates
result1$covariates
# specify the knots for each exposure
vaccine.knots = list("vac.type1" = c(30),
"vac.type2" = c(30,60),
"vac.type3" = c(30,60))
prior.infection.knots = list("inf.type1" = c(14),
"inf.type2" = c(14))
# Fit the simple model without interaction or related vaccine types
formula = outcome(subject.id, entry.time, event.time, censor.time) ~
age + gender + priority +
exposure(Vtime, Vtype, infection.time, infection.type)
data = exampleData
# test with simple model
result1 = dove3(formula = formula,
data = data,
vaccine_knots = vaccine.knots,
prior_infection_knots = prior.infection.knots)
result1$effectiveness
head(result1$effectiveness)
head(result1$effectiveness[[1]])
tail(result1$effectiveness[[1]])
head(result1$effectiveness[[5]])
tail(result1$effectiveness[[5]])
head(result1$effectiveness[[4]])
tail(result1$effectiveness[[4]])
head(result1$effectiveness[[1]])
result1$plots[[1]]
# specify the knots for each exposure
vaccine.knots = list("vac.type1" = c(30),
"vac.type2" = c(30,60),
"vac.type3" = c(30,60))
prior.infection.knots = list("inf.type1" = c(14),
"inf.type2" = c(14))
result1$covariates
head(result1$effectiveness[[1]])
result1$plots[[1]]
?dove3
# Specify the knots for vaccination without and with prior infection
vaccine.uninfected.knots = list("vac.noinf.type1" = c(30),
"vac.noinf.type2" = c(30,60),
"vac.noinf.type3" = c(30,60))
vaccine.infected.knots = list("vac.noinf.type1" = c(30),
"vac.noinf.type2" = c(60),
"vac.noinf.type3" = c(60))
# Fit the model with interaction between vaccination and prior infection status,
# and impose a constraint on the first pieces of the first two vaccine types.
dove3(formula = formula,
data = data,
vaccine_infection_interaction = TRUE,
vaccine_uninfected_knots = vaccine.uninfected.knots,
vaccine_infected_knots = vaccine.infected.knots,
prior_infection_knots = prior.infection.knots,
related_vaccine_types = list(c(1,2)))
# Fit the model with interaction between vaccination and prior infection status,
# and impose a constraint on the first pieces of the first two vaccine types.
result2 = dove3(formula = formula,
data = data,
vaccine_infection_interaction = TRUE,
vaccine_uninfected_knots = vaccine.uninfected.knots,
vaccine_infected_knots = vaccine.infected.knots,
prior_infection_knots = prior.infection.knots,
related_vaccine_types = list(c(1,2)))
result2$covariates
result2$effectiveness[[1]]
head(result2$effectiveness[[1]])
result2$plots[[1]]
result2$plots[[5]]
result2$plots[[4]]
result2$plots[[3]]
result2$plots[[2]]
result2$plots[[1]]
result2 = dove3(formula = formula,
data = data,
vaccine_infection_interaction = TRUE,
vaccine_uninfected_knots = vaccine.uninfected.knots,
vaccine_infected_knots = vaccine.infected.knots,
prior_infection_knots = prior.infection.knots,
related_vaccine_types = list(c(1,2)))
result2$covariates
head(result2$effectiveness[[1]])
result2$plots[[1]]
knitr::opts_chunk$set(echo = TRUE)
opt <- options()
options(continue="  ", width=70, prompt=" ")
on.exit(options(opt))
library(DOVE3, quietly=TRUE)
library(DOVE3)
library(DOVE3, quietly=TRUE)
knitr::opts_chunk$set(echo = TRUE)
opt <- options()
options(continue="  ", width=70, prompt=" ")
on.exit(options(opt))
library(DOVE3, quietly=TRUE)
document()
build()
