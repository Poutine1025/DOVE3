covariance[["coef"]]
covariance[,1] = beta
View(covariance)
covariance[,2] = sqrt(diag(cov_beta))
View(covariance)
covariance[,3] = beta / sqrt(diag(cov_beta))
View(covariance)
View(covariance)
pnorm(abs(covariance[,3]))
covariance[,4] = 2 * (1 - pnorm(abs(covariance[,3])))
View(covariance)
covariance[,5] = exp(beta)
View(covariance)
qnorm(0.975)
covariance[,6] = exp(beta - qnorm(0.975) * sqrt(diag(cov_beta)))
View(covariance)
covariance[,7] = exp(beta + qnorm(0.975) * sqrt(diag(cov_beta)))
View(covariance)
rownames(covariance)
rm(Ve)
rm(VE)
vh = result$vh
View(vh)
n_type = ncol(vh)
i=1
View(covariance)
View(time)
sourceCpp("./src/Cox_general.cpp")
result = Cox_general(Time, t, Delta, C, V,
S, X, m, VacTime, FirstInfTime,
dimension, infection_ind, interact_ind,
knots, ResMat, eps, MaxIter,
constantVE, interact, cutoff)
time = result$time
vh = result$vh
View(vh)
se = sqrt(result$var_vh)
lower = result$ci_lower
se = sqrt(result$var_vh)
View(se)
se = sqrt(result$var_vh)
View(se)
View(result$var_vh)
dimension
ResMat = diag(rep(1, sum(dimension)+ncol(X)))
result = Cox_general(Time, t, Delta, C, V,
S, X, m, VacTime, FirstInfTime,
dimension, infection_ind, interact_ind,
knots, ResMat, eps, MaxIter,
constantVE, interact, cutoff)
time = result$time
vh = result$vh
se = sqrt(result$var_vh)
View(se)
lower = result$ci_lower
upper = result$ci_upper
cov_beta = result$Covariance
beta = result$beta
p = length(beta)
n_type = ncol(vh)
## covariance
covariance = matrix(data = NA, nrow = p, ncol = 7)
colnames(covariance) = c("coef", "se(coef)", "z", "Pr(>|z|)", "exp(coef)", "lower .95", "upper .95")
covariance[,1] = beta
covariance[,2] = sqrt(diag(cov_beta))
covariance[,3] = beta / sqrt(diag(cov_beta))
covariance[,4] = 2 * (1 - pnorm(abs(covariance[,3])))
covariance[,5] = exp(beta)
covariance[,6] = exp(beta - qnorm(0.975) * sqrt(diag(cov_beta)))
covariance[,7] = exp(beta + qnorm(0.975) * sqrt(diag(cov_beta)))
View(covariance)
i=1
tmp_mat = matrix(data = 0, nrow = length(time), ncol = 5)
colnames(tmp_mat) = c("time", "VE", "se", "lower .95", "upper .95")
View(tmp_mat)
tmp_mat[,1] = time
tmp_mat[,2] = vh[,i]
View(tmp_mat)
tmp_mat[,3] = se[,i]
View(tmp_mat)
tmp_mat[,4] = lower[,i]
tmp_mat[,5] = upper[,i]
View(tmp_mat)
VE[[i]] = tmp_mat
VE = NULL
VE[[i]] = tmp_mat
VE = NULL
## vaccine
for (i in 1:n_type) {
tmp_mat = matrix(data = 0, nrow = length(time), ncol = 5)
colnames(tmp_mat) = c("time", "VE", "se", "lower .95", "upper .95")
tmp_mat[,1] = time
tmp_mat[,2] = vh[,i]
tmp_mat[,3] = se[,i]
tmp_mat[,4] = lower[,i]
tmp_mat[,5] = upper[,i]
VE[[i]] = tmp_mat
}
View(tmp_mat)
?filter
View(tmp_mat)
i=1
tmp_mat = matrix(data = 0, nrow = length(time), ncol = 5)
colnames(tmp_mat) = c("time", "VE", "se", "lower .95", "upper .95")
tmp_mat[,1] = time
tmp_mat[,2] = vh[,i]
tmp_mat[,3] = se[,i]
tmp_mat[,4] = lower[,i]
tmp_mat[,5] = upper[,i]
tmp_mat = tmp_mat %>%
filter(vh >= 0)
i=5
tmp_mat = matrix(data = 0, nrow = length(time), ncol = 5)
colnames(tmp_mat) = c("time", "VE", "se", "lower .95", "upper .95")
tmp_mat[,1] = time
tmp_mat[,2] = vh[,i]
tmp_mat[,3] = se[,i]
tmp_mat[,4] = lower[,i]
tmp_mat[,5] = upper[,i]
View(tmp_mat)
if(i >= infection_ind){
tmp_mat = tmp_mat[which(time>=cutoff),]
}
View(tmp_mat)
VE = NULL
## vaccine
for (i in 1:n_type) {
tmp_mat = matrix(data = 0, nrow = length(time), ncol = 5)
colnames(tmp_mat) = c("time", "VE", "se", "lower .95", "upper .95")
tmp_mat[,1] = time
tmp_mat[,2] = vh[,i]
tmp_mat[,3] = se[,i]
tmp_mat[,4] = lower[,i]
tmp_mat[,5] = upper[,i]
if(i >= infection_ind){
tmp_mat = tmp_mat[which(time>=cutoff),]
}
VE[[i]] = tmp_mat
}
## covariates
covariates = matrix(data = NA, nrow = p, ncol = 7)
colnames(covariates) = c("coef", "se(coef)", "z", "Pr(>|z|)", "exp(coef)", "lower .95", "upper .95")
covariates[,1] = beta
covariates[,2] = sqrt(diag(cov_beta))
covariates[,3] = beta / sqrt(diag(cov_beta))
covariates[,4] = 2 * (1 - pnorm(abs(covariates[,3])))
covariates[,5] = exp(beta)
covariates[,6] = exp(beta - qnorm(0.975) * sqrt(diag(cov_beta)))
covariates[,7] = exp(beta + qnorm(0.975) * sqrt(diag(cov_beta)))
View(covariates)
res = NULL
res[["covariates"]] = covariates
res[["vaccine"]] = VE
# matched call to include with returned object
cl <- match.call()
cl
View(exampleData)
?grDevices::dev.new
output = NULL
output[["covariates"]] = covariates
output[["vaccine"]] = VE
View(output)
vaccine
vaccine=VE
n_type = length(vaccine)
i=1
tmp_dat = vaccine[[i]]
View(tmp_dat)
tmp_dat = as.data.frame(vaccine[[i]])
View(tmp_dat)
ggplot2::ggplot(data = tmp_dat) +
ggplot2::geom_line(aes(x = time, y = VE*100), size = 0.75)
ggplot2::ggplot(data = tmp_dat) +
ggplot2::geom_line(ggplot2::aes(x = time, y = VE*100), size = 0.75)
library(tidyverse)
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75)
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
scale_y_continuous(name="Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))
xlabel = ifelse(i < infection_ind, "Months since vaccination", "Months since infection")
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0))
library(devtools)
?document()
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=`lower .95`*100, ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100, color = "green"), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100, fill = "green"), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100, fill = 2), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100, fill = 3), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100, fill = 10), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100, fill = 1), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100, fill = 99), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
xmax = max(tmp_dat$time[which(tmp_dat$VE>=0)])
xmax = max(tmp_dat$time[which(tmp_dat$VE>=0)],0)
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank())
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
aspect.ratio=1/2.5)
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
aspect.ratio=1/1.5)
i=4
xlabel = ifelse(i < infection_ind, "Months since vaccination", "Months since infection")
tmp_dat = as.data.frame(vaccine[[i]])
xmax = max(tmp_dat$time[which(tmp_dat$VE>=0)],0)
ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
aspect.ratio=1/1.5)
## data: subject.id, event.time, censor.time, entry.time, Vtime, Vtype, infection.time, infection.type, X
## ResMat: restriction matrix
## interact: consider interaction of vaccination and infection or not
tau = max(data$event.time)
n = length(unique(data$subject.id))
m = as.vector(table(data$subject.id))
MaxReccur = max(m)
index_dup = which(duplicated(data$subject.id))
data_unique = data[-index_dup,]
X = model.matrix(~., data_unique[,9:ncol(data)])[,-1]
# standardize covariates X
SD <- apply(X = X, MARGIN = 2L, FUN = sd, na.rm = TRUE)
# standardize covariates X
SD = apply(X = X, MARGIN = 2L, FUN = sd, na.rm = TRUE)
X = scale(x = X, center = FALSE, scale = SD)
View(X)
Time = data$event.time
Delta = ifelse(data$event.time < data$censor.time, 1, 0)
t = sort(unique(Time[which(Delta==1)]), decreasing = T)
C = data_unique$censor.time
VacTime = data_unique$entry.time
FirstInfTime = data_unique$infection.time
S = NULL
V = NULL
n_cohort = max(data$Vtype)
interact_ind = 0
infection_ind = 0
S_vac = as.list(data_unique$Vtime)
V_vac = as.list(data_unique$Vtype)
if(interact){
S_vac = computeList(S_vac, S_vac, (1:n)-1)
V_vac = computeList(V_vac, as.list(data_unique$Vtype + n_cohort), (1:n)-1)
interact_ind = n_cohort + 1
infection_ind = 2*n_cohort + 1
} else{
infection_ind = n_cohort + 1
}
for (i in 1:MaxReccur) {
if(i == 1){
S = computeList(S_vac, as.list(data_unique$infection.time), (1:n)-1)
V = computeList(V_vac, as.list(data_unique$infection.type + infection_ind - 1), (1:n)-1)
} else{
subid_i = which(m == i)
loc = which(data$subject.id%in%subid_i)
loc = loc[seq(i,length(loc),i)]
time_i = data$infection.time[loc]
type_i = data$infection.type[loc]
S_tmp = rep(tau, n)
S_tmp[subid_i] = time_i
V_tmp = rep(infection_ind, n)
V_tmp[subid_i] = type_i + infection_ind - 1
S = computeList(S, as.list(S_tmp), (1:n)-1)
V = computeList(V, as.list(V_tmp), (1:n)-1)
}
}
dimension = numeric(length(knots))
for (i in 1:length(dimension)) {
dimension[i] = length(knots[[i]]) + 1
}
if(constantVE){
dimension = dimension - 1
}
dimension[infection_ind:length(dimension)] = dimension[infection_ind:length(dimension)] + 1
result = Cox_general(Time, t, Delta, C, V,
S, X, m, VacTime, FirstInfTime,
dimension, infection_ind, interact_ind,
knots, ResMat, eps, MaxIter,
constantVE, interact, cutoff)
result$Covariance
SD
result$beta
result$beta * SD
View(covariates)
result$beta / SD
View(covariates)
result$Covariance
result$Covariance /SD
result = Cox_general(Time, t, Delta, C, V,
S, X, m, VacTime, FirstInfTime,
dimension, infection_ind, interact_ind,
knots, ResMat, eps, MaxIter,
constantVE, interact, cutoff)
result$beta = result$beta / SD
for (k in 1:ncol(X)) {
result$Covariance[,k] = result$Covariance[,k] / SD[k]
result$Covariance[k,] = result$Covariance[k,] / SD[k]
}
sqrt(diag(result$Covariance))
View(covariates)
tmp_plot
tmp_plot = ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
aspect.ratio=1/1.5)
tmp_plot
document()
sourceCpp("./src/Cox_general.cpp")
result = Cox_general(Time, t, Delta, C, V,
S, X, m, VacTime, FirstInfTime,
dimension, infection_ind, interact_ind,
knots, ResMat, eps, MaxIter,
constantVE, interact, cutoff)
result$beta = result$beta / SD
for (k in 1:ncol(X)) {
result$Covariance[,k] = result$Covariance[,k] / SD[k]
result$Covariance[k,] = result$Covariance[k,] / SD[k]
}
sqrt(diag(result$Covariance))
View(covariates)
document()
sourceCpp("./src/Cox_general.cpp")
document()
document()
rm(list = c("computeList", "Cox_general"))
document()
n_type = length(vaccine)
result = NULL
for (i in 1:n_type) {
xlabel = ifelse(i < infection_ind, "Months since vaccination", "Months since infection")
tmp_dat = as.data.frame(vaccine[[i]])
xmax = max(tmp_dat$time[which(tmp_dat$VE>=0)],0)
tmp_plot = ggplot(data = tmp_dat) +
geom_line(aes(x = time, y = VE*100), size = 0.75) +
geom_ribbon(aes(x = time, ymin=pmax(`lower .95`*100, 0), ymax=`upper .95`*100), alpha = 0.3, show.legend = F) +
scale_y_continuous(name = "Effectiveness (%)", breaks=seq(0, 100, 10), limits = c(0,100), expand = c(0, 0))+
scale_x_continuous(name = xlabel, expand = c(0, 0), limits = c(0,xmax)) +
theme_light() +
theme(legend.key = element_rect(colour = NA, fill = NA),
legend.background = element_blank(),
aspect.ratio=1/1.5)
result[[i]] = tmp_plot
}
View(result)
getwd()
document()
document()
document()
document()
load("./data/exampleData.RData")
View(exampleData)
data = exampleData
colnames(data_unique[,9:ncol(data)])
data_unique = data[-index_dup,]
## data: subject.id, event.time, censor.time, entry.time, Vtime, Vtype, infection.time, infection.type, X
## ResMat: restriction matrix
## interact: consider interaction of vaccination and infection or not
tau = max(data$event.time)
n = length(unique(data$subject.id))
m = as.vector(table(data$subject.id))
MaxReccur = max(m)
index_dup = which(duplicated(data$subject.id))
data_unique = data[-index_dup,]
colnames(data_unique[,9:ncol(data)])
View(exampleData)
View(exampleData)
load("./data/exampleData.RData")
rownames(exampleData)
rownames(exampleData) = NULL
View(exampleData)
save(exampleData, file = "./data/exampleData.RData")
load("./data/exampleData.RData")
View(exampleData)
table(data$priority)
table(exampleData$age)
document()
View(exampleData)
## data: subject.id, event.time, censor.time, entry.time, Vtime, Vtype, infection.time, infection.type, X
## ResMat: restriction matrix
## interact: consider interaction of vaccination and infection or not
tau = max(data$event.time)
n = length(unique(data$subject.id))
m = as.vector(table(data$subject.id))
MaxReccur = max(m)
index_dup = which(duplicated(data$subject.id))
data_unique = data[-index_dup,]
coef_name = colnames(data_unique[,9:ncol(data)])
X = model.matrix(~., data_unique[,9:ncol(data)])[,-1]
colnames(X)
document()
pwd
getwd()
document()
?exampleData
View(exampleData)
View(exampleData)
View(exampleData)
